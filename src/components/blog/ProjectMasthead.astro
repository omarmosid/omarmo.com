---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";

interface Props {
	content: CollectionEntry<"project">;
}

const {
	content: { data },
} = Astro.props;

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "long",
};
---

{
	data.coverImage && (
		<div class="mb-6 aspect-[16/9]">
			<Image
				alt={data.coverImage.alt}
				class="object-cover"
				fetchpriority="high"
				loading="eager"
				src={data.coverImage.src}
			/>
		</div>
	)
}
{data.draft ? <span class="text-base text-red-500">(Draft)</span> : null}
<h1 class="title">
	{data.title}
	{data.featured && (
		<span class="ml-2 rounded bg-accent px-2 py-1 text-sm text-white">Featured</span>
	)}
</h1>

<div class="flex flex-wrap items-center gap-x-3 gap-y-2">
	<p class="font-semibold">
		<FormattedDate date={data.startDate} dateTimeOptions={dateTimeOptions} />
		{data.endDate && (
			<>
				{" â†’ "}
				<FormattedDate date={data.endDate} dateTimeOptions={dateTimeOptions} />
			</>
		)}
	</p>
</div>

<div class="mt-4 flex flex-wrap gap-3">
	{data.githubUrl && (
		<a 
			href={data.githubUrl} 
			target="_blank" 
			rel="noopener noreferrer"
			class="flex items-center gap-2 rounded bg-gray-900 px-3 py-2 text-white hover:bg-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600"
		>
			<Icon name="mdi:github" class="h-4 w-4" />
			View Code
		</a>
	)}
	{data.liveUrl && (
		<a 
			href={data.liveUrl} 
			target="_blank" 
			rel="noopener noreferrer"
			class="flex items-center gap-2 rounded bg-accent px-3 py-2 text-white hover:bg-accent/90"
		>
			<Icon name="mdi:external-link" class="h-4 w-4" />
			Live Demo
		</a>
	)}
</div>

{
	!!data.technologies?.length && (
		<div class="mt-4">
			<h3 class="mb-2 font-semibold">Technologies Used:</h3>
			<div class="flex flex-wrap gap-2">
				{data.technologies.map((tech) => (
					<span class="rounded bg-accent/10 px-2 py-1 text-sm text-accent">
						{tech}
					</span>
				))}
			</div>
		</div>
	)
}

{
	!!data.tags?.length && (
		<div class="mt-4">
			<svg
				aria-hidden="true"
				class="inline-block h-6 w-6"
				fill="none"
				focusable="false"
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="1.5"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M0 0h24v24H0z" fill="none" stroke="none" />
				<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
				<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
				<path d="M6 9h-.01" />
			</svg>
			{data.tags.map((tag, i) => (
				<>
					<span class="contents">
						<span class="cactus-link inline-block before:content-['#']">{tag}</span>
						{i < data.tags.length - 1 && ", "}
					</span>
				</>
			))}
		</div>
	)
}
